Módulos

Módulos Ruby são similares a classes em relação ao fato de que também armazenam
uma coleção de métodos, constantes e outras definições de módulos e classes. 
Ou seja, quando crio um módulo, posso colocar outro módulo, classes e etc dentro.

Entretando, diferente das classes, você não pode criar objetos baseados em
módulos nem pode criar módulos que herdam desse módulo; ao invés dissom você
especifica qual funcionalidade de um módulo específico você deseja adicionar a
uma classe ou a um objeto específico. Não se pode fazer hierarquia.

Módulos permanecem sozinhos; não há hierarquia de módulos ou herança. Módulos 
são um bom lugar para armazenar constantes em um local centralizado.
Eu uso módulos quando se tenho muitas constantes no meu projeto e desejo mantê-lo
organizado.


PRINCIPAIS OBJETIVOS DOS MÓDULOS

Primeiro eles agem como namespace, permitindo que você defina métodos cujos
nomes não irão colidir com aqueles definidos em outras partes de um programa.
Um namespace serve para fornecer uma maneira de manter um conjunto de nomes 
separado de outro. Os nomes de classe declarados em um namespace não entram em
conflito com os mesmos nomes de classe declarados em outro

MÓDULOS E MIXINS

Em segundo lugar, permitem que você compartihe funcionalidade entre classes
- se uma classe "mistura"(mixes in) um módulo(isto é, inclui), todos os métodos 
de instância do módulo se tornam disponíveis como se tivessem sido definidos na
classe. Funciona como herança múltipla.